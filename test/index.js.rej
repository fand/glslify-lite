diff a/test/index.js b/test/index.js	(rejected hunks)
@@ -20,15 +20,15 @@ test("node simulated tagged template string", async function(t) {
-  var output = await glx(
-    [
-      "" +
-        '  #pragma glslify: noise = require("glsl-noise/simplex/3d")\n' +
-        "  precision mediump float;\n" +
-        "  varying vec3 vpos;\n" +
-        "  void main () {\n" +
-        "    gl_FragColor = vec4(noise(vpos*",
-      "),1);\n" + "  }\n"
-    ],
-    "25.0"
-  );
-  t.ok(/taylorInvSqrt/.test(output), "contains parts of the file");
-  t.ok(/vpos\*25\.0\),1/.test(output), "interpolated var");
-  t.end();
+    var output = await glx(
+        [
+            "" +
+                '  #pragma glslify: noise = require("glsl-noise/simplex/3d")\n' +
+                "  precision mediump float;\n" +
+                "  varying vec3 vpos;\n" +
+                "  void main () {\n" +
+                "    gl_FragColor = vec4(noise(vpos*",
+            "),1);\n" + "  }\n"
+        ],
+        "25.0"
+    );
+    t.ok(/taylorInvSqrt/.test(output), "contains parts of the file");
+    t.ok(/vpos\*25\.0\),1/.test(output), "interpolated var");
+    t.end();
@@ -38,14 +38,14 @@ test("node tagged template string", function(t) {
-  var output = Function(
-    ["glx"],
-    "return glx`\n" +
-      '  #pragma glslify: noise = require("glsl-noise/simplex/3d")\n' +
-      "  precision mediump float;\n" +
-      "  varying vec3 vpos;\n" +
-      "  void main () {\n" +
-      '    gl_FragColor = vec4(noise(vpos*${"25.0"}),1);\n' +
-      "  }\n" +
-      "`"
-  )(glx);
-  t.ok(/taylorInvSqrt/.test(output), "contains parts of the file");
-  t.ok(/vpos\*25\.0\),1/.test(output), "interpolated var");
-  t.end();
+    var output = Function(
+        ["glx"],
+        "return glx`\n" +
+            '  #pragma glslify: noise = require("glsl-noise/simplex/3d")\n' +
+            "  precision mediump float;\n" +
+            "  varying vec3 vpos;\n" +
+            "  void main () {\n" +
+            '    gl_FragColor = vec4(noise(vpos*${"25.0"}),1);\n' +
+            "  }\n" +
+            "`"
+    )(glx);
+    t.ok(/taylorInvSqrt/.test(output), "contains parts of the file");
+    t.ok(/vpos\*25\.0\),1/.test(output), "interpolated var");
+    t.end();
